import os
import nextcord
from nextcord.ext import commands
from googleapiclient.discovery import build
import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import re
import json
import asyncio
from keep_alive import keep_alive
keep_alive()
# ======== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ API ========

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
SEARCH_ENGINE_ID = os.getenv("Search_Engine_ID")
GEMINI_API_KEY = os.getenv("gemini_api_key")

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û (Sightengine)
API_USER = os.getenv("Api_user")         # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô API_USER ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
API_SECRET = os.getenv("API_SECRET") # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô API_SECRET ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# ======== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Generative API ========
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

generation_config = {
    "temperature": 0.7,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 65536,
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-2.0-pro-exp-02-05",
    generation_config=generation_config,
)

# ======== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intents ‡πÅ‡∏•‡∏∞ Bot ========
intents = nextcord.Intents.all()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ======== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô ‡πÜ ========
async def send_long_message(ctx, message):
    for i in range(0, len(message), 2000):
        await ctx.send(message[i:i + 2000])

# ======== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å URL ========
def get_text_from_url(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        paragraphs = soup.find_all('p')
        return '\n'.join([para.get_text() for para in paragraphs])
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL: {e}"

def is_url(string):
    url_pattern = re.compile(r'^(https?://)?(www\.)?[a-zA-Z0-9-]+\.[a-zA-Z]{2,6}(/[\w-]*)*/?$')
    return bool(url_pattern.match(string))

async def google_search(query):
    service = build("customsearch", "v1", developerKey=GOOGLE_API_KEY)
    res = service.cse().list(q=query, cx=SEARCH_ENGINE_ID).execute()
    return res.get("items", [])

async def google_image_search(query):
    service = build("customsearch", "v1", developerKey=GOOGLE_API_KEY)

    start_index = random.randint(1, 10) * 10  # ‡∏™‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

    res = service.cse().list(
        q=query,
        cx=SEARCH_ENGINE_ID,
        searchType="image",
        num=5,
        start=start_index,
        dateRestrict="m1",
    ).execute()

    return res.get("items", [])
@bot.slash_command(name="long_task", description="‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô")
async def long_task(ctx: nextcord.Interaction):
    await ctx.response.defer()  # ‡πÅ‡∏à‡πâ‡∏á nextcord ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•

    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏£‡∏∑‡∏≠ API call
    await asyncio.sleep(10)  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    await ctx.followup.send("‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")  # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
# ======== ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ========
history = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

@bot.slash_command(name="ask", description="‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤")
async def ask(ctx, *, query: str = None):
    await ctx.response.defer()
    if not query:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô `/ask <‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°>`")
        return

    user_id = ctx.user.id  # ‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    username = ctx.user.name  # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

    if user_id not in history:
        history[user_id] = []  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà

    if is_url(query):
        page_content = get_text_from_url(query)
        if "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" in page_content:
            await ctx.send(page_content)
            return
        query = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:\n{page_content}"

    try:
        # ‡πÉ‡∏™‡πà user_id ‡πÅ‡∏•‡∏∞ username ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ AI
        formatted_query = f"[User ID: {user_id}, Username: {username}] {query}"

        chat_session = model.start_chat(history=history[user_id])
        response = chat_session.send_message(formatted_query)
        ai_response = response.text

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        history[user_id].append({"role": "user", "parts": [formatted_query]})
        history[user_id].append({"role": "model", "parts": [ai_response]})

        await send_long_message(ctx, ai_response)

    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@bot.slash_command(name="askurl", description="‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ AI ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
async def askurl(ctx, *, url: str = None):
    await ctx.response.defer()
    if not url:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô `!askurl <URL>`")
        return

    page_content = get_text_from_url(url)
    if "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" in page_content:
        await ctx.send(page_content)
        return

    query = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:\n{page_content}"

    try:
        chat_session = model.start_chat(history=[])
        response = chat_session.send_message(query)
        ai_response = response.text

        await send_long_message(ctx, ai_response)

    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@bot.slash_command(name="search", description="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
async def search(ctx, *, query: str = None):
    await ctx.response.defer()
    if not query:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô `!search <‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤>`")
        return

    try:
        search_results = await google_search(query)
        if not search_results:
            await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏µ‡πâ.")
            return

        urls = [result["link"] for result in search_results[:2]]  

        content_list = []
        for url in urls:
            content = get_text_from_url(url)
            if "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" not in content:
                content_list.append(content)

        if not content_list:
            await ctx.send("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ.")
            return

        combined_content = "\n\n".join(content_list)
        chat_session = model.start_chat(history=[])
        response = chat_session.send_message(f"‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:\n{combined_content}")
        summary = response.text

        await send_long_message(ctx, f"üîé ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `{query}`\nüìú {summary}")

    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@bot.slash_command(name="unc", description="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå")
async def unc(ctx):
    import random

    bot_permissions = ctx.guild.me.guild_permissions
    permission_results = {
        "üì¢ ‡∏û‡∏π‡∏î‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó": "üü¢" if bot_permissions.send_messages else "üî¥",
        "üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°": "üü¢" if bot_permissions.manage_messages else "üî¥",
        "üìå ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°": "üü¢" if bot_permissions.manage_messages else "üî¥",
        "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°": "üü¢" if bot_permissions.manage_messages else "üî¥",
        "üé§ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Voice": "üü¢" if bot_permissions.connect else "üî¥",
        "üé∂ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô VC": "üü¢" if bot_permissions.speak else "üî¥",
        "üìÅ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå": "üü¢" if bot_permissions.attach_files else "üî¥",
        "üì∑ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û": "üü¢" if bot_permissions.embed_links else "üî¥",
        "üõ†Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå": "üü¢" if bot_permissions.manage_guild else "üî¥",
    }

    test_results = {}

    try:
        await ctx.send("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!")
        test_results["üì© ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"] = "üü¢"
    except:
        test_results["üì© ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"] = "üî¥"

    try:
        pdf_url = "https://arxiv.org/pdf/2101.00001.pdf"
        pdf_response = requests.get(pdf_url)
        test_results["üìÑ ‡∏≠‡πà‡∏≤‡∏ô PDF"] = "üü¢" if pdf_response.status_code == 200 else "üî¥"
    except:
        test_results["üìÑ ‡∏≠‡πà‡∏≤‡∏ô PDF"] = "üî¥"

    try:
        img_url = "https://www.w3.org/Icons/w3c_main.png"
        img_response = requests.get(img_url)
        test_results["üñºÔ∏è ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"] = "üü¢" if img_response.status_code == 200 else "üî¥"
    except:
        test_results["üñºÔ∏è ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"] = "üî¥"

    try:
        search_results = ["‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"]  
        test_results["üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö"] = "üü¢" if search_results else "üî¥"
    except:
        test_results["üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö"] = "üî¥"

    try:
        ai_test_query = "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OpenAI"
        ai_response = "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å AI"
        test_results["üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI"] = "üü¢" if ai_response else "üî¥"
    except:
        test_results["üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI"] = "üî¥"

    other_features = {
        "üé≠ Face Recognition": "üü¢",
        "üñ•Ô∏è Cybersecurity Monitoring": "üü°",
        "‚ö° Smart Auto-Reply": "üü¢",
        "üìà Data Analysis": "üü°",
        "üè• Medical AI": "üî¥",
        "üì° 5G Network Optimizer": "üî¥",
        "anti-nsfw img": "üü¢",
    }

    total_tests = len(permission_results) + len(test_results) + len(other_features)
    passed_tests = sum(1 for status in {**permission_results, **test_results, **other_features}.values() if status == "üü¢")

    completeness_score = (passed_tests / total_tests) * 100

    if completeness_score == 100:
        anime_gif = "https://media.tenor.com/iRkL6OMGhU4AAAAM/alarm.gif"  
    elif completeness_score >= 50:
        anime_gif = "https://media.tenor.com/hBwkISiqNI0AAAAM/shura-hiwa-lamer.gif"  
    else:
        anime_gif = "https://media.tenor.com/P7fsIu00v04AAAAM/the-boys-osrs.gif"  

    embed = nextcord.Embed(
        title="üîç ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
        description=f"**üõ†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó**: `{completeness_score:.1f}%`\n\n"
                    f"üîó **‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**",
        color=nextcord.Color.green() if completeness_score > 95 else nextcord.Color.orange()
    )

    embed.add_field(name="üìú ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó", value="\n".join([f"{perm}: {status}" for perm, status in permission_results.items()]), inline=False)

    embed.add_field(name="üõ†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö", value="\n".join([f"{feature}: {status}" for feature, status in test_results.items()]), inline=False)

    embed.add_field(name="‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡∏¥‡∏°", value="\n".join([f"{feature}: {status}" for feature, status in other_features.items()]), inline=False)

    embed.set_footer(text="üì¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï!")
    embed.set_image(url=anime_gif)

    await ctx.send(embed=embed)

@bot.slash_command(name="img", description="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Google")
async def img(ctx, *, query: str = None):
    await ctx.response.defer()
    if not query:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô `!img <‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤>`")
        return

    try:
        search_results = await google_image_search(query)
        if not search_results:
            await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
            return

        top_image_url = search_results[0]["link"]
        embed = nextcord.Embed(title=f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {query}")
        embed.set_image(url=top_image_url)
        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

# ======== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û ========
image_filter_status = {}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô API
def check_image(image_url):
    params = {
        "url": image_url,
        "models": "nudity-2.1, weapon, gore-2.0, violence, self-harm",
        "api_user": API_USER,
        "api_secret": API_SECRET,
    }

    response = requests.get("https://api.sightengine.com/1.0/check.json", params=params)
    
    if response.status_code != 200:
        print("‚ùå API ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.status_code)
        return None

    return response.json()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def is_image_safe(data):
    if not data or "nudity" not in data:
        return True  # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

    if (
        data["nudity"].get("very_suggestive", 0) > 0.8
        or data["nudity"].get("erotica", 0) > 0.5
        or data["weapon"]["classes"].get("firearm", 0) > 0.1
        or data["gore"].get("prob", 0) > 0.1
        or data["violence"].get("prob", 0) > 0.1
        or data["self-harm"].get("prob", 0) > 0.1
    ):
        return False  # ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    return True  # ‡∏†‡∏≤‡∏û‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

# ======== ‡∏£‡∏ß‡∏° on_ready ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô ========
@bot.event
async def on_ready():
    print(f'We have logged in as {bot.user}')
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå: {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üîó ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash: {len(synced)} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash: {e}")
@bot.slash_command(name="checkprofile", description="üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
async def check_profile(interaction: nextcord.Interaction, member: nextcord.Member):
    await interaction.response.defer()  # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô timeout
    
    embed = nextcord.Embed(title=f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: {member.name}", color=0x3498db)
    
    # üü° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (Avatar)
    avatar_url = member.display_avatar.url
    embed.set_thumbnail(url=avatar_url)
    api_response = check_image(avatar_url)

    if api_response and not is_image_safe(api_response):
        embed.add_field(name="‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", value="‚ùå ‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°!", inline=False)
    else:
        embed.add_field(name="‚úÖ ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", value="‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", inline=False)
    
    # üü° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    username = member.name
    nickname = member.nick if member.nick else "‡πÑ‡∏°‡πà‡∏°‡∏µ"
    bad_words = ["fuck", "shit", "bitch", "slut", "pussy", "asshole", "cunt", "nigger"]  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°‡πÑ‡∏î‡πâ

    if any(word in username.lower() for word in bad_words) or any(word in nickname.lower() for word in bad_words):
        embed.add_field(name="‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", value="‚ùå ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°!", inline=False)
    else:
        embed.add_field(name="‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", value="‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", inline=False)
    
    # üü° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö "About Me" ‡∏´‡∏£‡∏∑‡∏≠ Status ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
    about_me = member.public_flags  # ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á About Me ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á)
    embed.add_field(name="üìå ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", value=str(about_me) if about_me else "‡πÑ‡∏°‡πà‡∏°‡∏µ", inline=False)

    # üü° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    account_age = (nextcord.utils.utcnow() - member.created_at).days
    if account_age < 7:
        embed.add_field(name="‚ö†Ô∏è ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", value=f"‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ({account_age} ‡∏ß‡∏±‡∏ô)", inline=False)
    else:
        embed.add_field(name="‚úÖ ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", value=f"‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ {account_age} ‡∏ß‡∏±‡∏ô", inline=False)

    await interaction.followup.send(embed=embed)
# ======== Slash .slash_command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û ========
@bot.slash_command(name="togglefilter", description="‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
async def toggle_filter(interaction: nextcord.Interaction):
    guild_id = interaction.guild.id
    if guild_id not in image_filter_status:
        image_filter_status[guild_id] = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    # ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    image_filter_status[guild_id] = not image_filter_status[guild_id]
    
    status = "‡πÄ‡∏õ‡∏¥‡∏î ‚úÖ" if image_filter_status[guild_id] else "‡∏õ‡∏¥‡∏î ‚ùå"
    await interaction.response.send_message(f"üîÑ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å {status} ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ", ephemeral=True)

# ======== on_message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó ========
@bot.event
async def on_message(message):
    # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    if message.author == bot.user:
        return

    # ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (DM) ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
    if not message.guild:
        await bot.process_commands(message)
        return

    guild_id = message.guild.id

    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô dict ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if guild_id not in image_filter_status:
        image_filter_status[guild_id] = False

    # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if image_filter_status[guild_id]:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
        if message.attachments:
            for attachment in message.attachments:
                if attachment.filename.lower().endswith(("png", "jpg", "jpeg", "gif")):
                    image_url = attachment.url
                    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û: {image_url}")
                    api_response = check_image(image_url)

                    if api_response and not is_image_safe(api_response):
                        try:
                            await message.delete()  # ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                        except Exception as e:
                            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {e}")
                        try:
                            await message.author.send(
                                "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (18+) ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é"
                            )
                        except nextcord.Forbidden:
                            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {message.author}")

                        await message.channel.send(
                            f"{message.author.mention} ‡πÑ‡∏î‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!"
                        )
                    else:
                        print("‚úÖ ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")

    await bot.process_commands(message)

bot.run(os.getenv("TOKEN"))
